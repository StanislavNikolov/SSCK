var app        = require("express")();
var bodyParser = require("body-parser");
var cp         = require("child_process").exec;
var fs         = require("fs");
var handlebars = require("handlebars");
var toml       = require("toml");

var config = toml.parse(fs.readFileSync("config.toml"));
console.log(config);

if(config == null) config = {};
if(config.users == null) config.users = {};
if(config.users.allow_self_registration == null) config.allow_self_registration = true;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

var indexPage = "", resultsPage = "", loginPage = "";
var users = [];
var tasks = [];

function renderIndexPage()
{
	cp(__dirname + "/gen_tasklist.sh", function(err, stdout, stderr) {
		fs.readFile(stdout, "utf-8", function(error, json) {
			var data = JSON.parse(json);
			fs.readFile("index_template.html", "utf-8", function(error, source) {
				var template = handlebars.compile(source);
				indexPage = template(data);
			});
			fs.unlink(stdout, function() {}); // delete the tmp file generated by gen_tasklist
		});
	});
}

renderIndexPage();

function renderLoginPage()
{
	fs.readFile("login_template.html", "utf-8", function(error, source) {
		var template = handlebars.compile(source);
		loginPage = template();
	});
}
renderLoginPage();

function renderResultsPage()
{
	fs.readFile("results_template.html", "utf-8", function(error, source) {
		var template = handlebars.compile(source);
		resultsPage = template({users: users, tasks: tasks});
	});
}

app.get("/", function(req, res) {
	res.send(indexPage);
});
app.get("/login", function(req, res) {
	res.send(loginPage);
});
app.get("/userfiles/*", function(req, res) {
	res.sendFile(__dirname + req.url);
});
app.post("/getlog", function(req, res) {
	var user = getUserFromToken(req.body.token);
	var valid = false;

	if(user != -1)
	{
		var subl = users[user].submissions[req.body.task];
		if(subl != null)
		{
			for(var i in subl)
			{
				if(subl[i].id == req.body.id)
				{
					valid = true;
					break;
				}
			}
		}
	}
	if(valid)
	{
		res.sendFile(__dirname + "/submissions"
				+ "/" + users[user].name
				+ "/" + req.body.task
				+ "/" + req.body.id
				+ ".log");
	}
	else
	{
		res.send("x");
	}
});
app.post("/getsubmlist", function(req, res) {
	var user = getUserFromToken(req.body.token);
	var task = req.body.task;
	if(user != -1)
	{
		var subl = users[user].submissions[task];
		if(subl == null)
		{
			res.send("x");
			return;
		}

		var out = [];
		var begin = Math.max(0, subl.length - 10);
		for(var i = begin;i < subl.length;i ++)
		{
			out.push(subl[i]);
		}
		res.send(JSON.stringify(out));
	}
});

function getUserFromToken(token)
{
	for(var i in users)
	{
		if(users[i].token == token) return i;
	}
	return -1;
}

app.post("/tokenStatus", function(req, res) {
	var token = req.body.token;

	if(getUserFromToken(token) != -1)
	{
		res.send("o");
		return;
	}
	res.send("x");
});

app.post("/login", function(req, res) {
	if(req.body.username == null || req.body.password == null) res.send("x");
	var username = req.body.username;
	var password = req.body.password;

	var status = -2; // -2 no such user, -1 invalid password , >=0 the index of the correct user
	for(var i in users)
	{
		if(users[i].name == username)
		{
			status = -1;
			if(users[i].password == password)
			{
				status = i
				break;
			}
		}
	}

	if(status == -1)
	{
		res.send('x');
		return;
	}

	var newToken = randStr(32);

	if(status == -2)
	{
		var nu = {
			name:        req.body.username,
			password:    req.body.password,
			token:       newToken,
			results:     {},
			total:       0,
			submissions: {}
		};
		users.push(nu);
		console.log("Created new account", req.body.username, req.body.password, newToken);
	}
	else
	{
		users[status].token = newToken;
	}

	console.log("Returning", newToken);
	res.send(newToken);

});

readResults();
renderResultsPage();

app.get("/results", function(req, res) {
	res.send(resultsPage);
});

var port = process.env.PORT || 3000;
var server = app.listen(port, function() {
	var host = server.address().address;
	var port = server.address().port;

	console.log("Starting server on http://%s:%s", host, port);
});

function randStr(len)
{
	var out = "";
	while(len - 16 > 0) {
		out += Math.random().toString(36).substr(2, 16);
		len -= 16;
	}
	while(len > 0) {
		out += Math.random().toString(36).substr(2, 1);
		len -= 1;
	}
	return out;
}

function saveResults()
{
	fs.writeFile(__dirname + "/results_tasks", JSON.stringify(tasks));
	fs.writeFile(__dirname + "/results_users", JSON.stringify(users));
}

function readResults()
{
	fs.readFile(__dirname + "/results_tasks", "utf8",
			function(err, data)
			{
				if(!err)
				{
					tasks = JSON.parse(data);
					return;
				}
				console.log(err);
			});

	fs.readFile(__dirname + "/results_users", "utf8",
			function(err, data)
			{
				if(!err)
				{
					users = JSON.parse(data);
					users.sort(function(u1, u2) { return u1.total < u2.total; } );
					return;
				}
				console.log(err);
			});
}

function addNewResult(name, task, result)
{
	var inTasks = false;
	for(var i in tasks)
	{
		if(tasks[i] == task)
		{
			inTasks = true;
			break;
		}
	}

	if(!inTasks)
	{
		tasks.push(task);
		tasks.sort();
	}

	for(var i in users)
	{
		if(name == users[i].name)
		{
			if(users[i].results[task] == null || result > users[i].results[task])
			{
				users[i].results[task] = result;
				users[i].total = 0;
				for(var j in users[i].results)
					users[i].total += users[i].results[j];
				users.sort(function(u1, u2) { return u1.total < u2.total; } );
				renderResultsPage();
			}
			return;
		}
	}

	console.log("[ERROR] Somehow unregistered user submited something");
}

app.post("/", function(req, res) {
	var user = getUserFromToken(req.body.token);

	if(user == -1) // invalid token, shouldn't happen
	{
		res.send("x");
		return;
	}

	var task = req.body.task;
	var code = req.body.code;

	if(fs.existsSync(__dirname + "/submissions") == false)
		fs.mkdirSync(__dirname + "/submissions");

	var dir = __dirname + "/submissions/" + users[user].name;
	if(fs.existsSync(dir) == false)
		fs.mkdirSync(dir);

	dir += "/" + task;
	if(fs.existsSync(dir) == false)
		fs.mkdirSync(dir);

	var submId = randStr(8);
	var completeFileName = dir + "/" + submId; // TODO generate more logical name (date, hash)

	fs.writeFile(completeFileName + ".cpp", code, function(err) {});

	console.log("[INFO]", new Date(),
			"Submission accepted by", users[user].name,
			"on task", task,
			"with id", submId);

	var checker = "standard";
	if(config.checkers[task] != null && config.checkers[task] !== "")
		checker = config.checkers[task];

	var command = __dirname + "/compile.sh "
		+ completeFileName + ".cpp " + task + " " + checker
		+ " | tee " + completeFileName + ".log";

	var subl = users[user].submissions[task];
	if(subl == null)
	{
		users[user].submissions[task] = [];
		subl = users[user].submissions[task];
	}
	var sublIndex = subl.push({id: submId, result: -1}) - 1;

	res.send(submId);

	cp(command, function(err, stdout, stderr) {
		var output = "";
		var lines = stdout.split("\n");
		var result = 0;
		for(var i = 0;i < lines.length;i ++)
		{
			if(lines[i] == "__SSCK_RES_PACK__") // TODO documentation
			{
				i ++;
				result = Number(lines[i]);
				if(result == NaN)
				{
					console.log("[ERROR] Invalid result for task", task, "by", name, ": ", strres);
					console.log("There is probably an error in the checker for that task.");
					result = 0;
				}
				addNewResult(users[user].name, req.body.task, result);
			}
			else
			{
				output += lines[i] + "<br>\n";
			}
		}

		console.log("[INFO]", new Date(),
				"Submission with id", submId,
				"got score", result);

		//fs.writeFile(completeFileName + ".log", output, function(err) {});

		subl[sublIndex].result = result;

		saveResults();
	});
});
